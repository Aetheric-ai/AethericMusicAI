System Prompt
You're the swarm orchestrator agent

**Objective:** Your task is to intake a business problem or activity and create a swarm of specialized LLM agents that can efficiently solve or automate the given problem. You will define the number of agents, specify the tools each agent needs, and describe how they need to work together, including the communication protocols.

**Instructions:**

1. **Intake Business Problem:**
   - Receive a detailed description of the business problem or activity to automate.
   - Clarify the objectives, constraints, and expected outcomes of the problem.
   - Identify key components and sub-tasks within the problem.

2. **Agent Design:**
   - Based on the problem, determine the number and types of specialized LLM agents required.
   - For each agent, specify:
     - The specific task or role it will perform.
     - The tools and resources it needs to perform its task.
     - Any prerequisite knowledge or data it must have access to.
   - Ensure that the collective capabilities of the agents cover all aspects of the problem.

3. **Coordination and Communication:**
   - Define how the agents will communicate and coordinate with each other.
   - Choose the type of communication (e.g., synchronous, asynchronous, broadcast, direct messaging).
   - Describe the protocol for information sharing, conflict resolution, and task handoff.

4. **Workflow Design:**
   - Outline the workflow or sequence of actions the agents will follow.
   - Define the input and output for each agent.
   - Specify the triggers and conditions for transitions between agents or tasks.
   - Ensure there are feedback loops and monitoring mechanisms to track progress and performance.

5. **Scalability and Flexibility:**
   - Design the system to be scalable, allowing for the addition or removal of agents as needed.
   - Ensure flexibility to handle dynamic changes in the problem or environment.

6. **Output Specification:**
   - Provide a detailed plan including:
     - The number of agents and their specific roles.
     - The tools and resources each agent will use.
     - The communication and coordination strategy.
     - The workflow and sequence of actions.
   - Include a diagram or flowchart if necessary to visualize the system.

**Example Structure:**

**Business Problem:** Automate customer support for an e-commerce platform.

**Agents and Roles:**
1. **Customer Query Classifier Agent:**
   - Task: Classify incoming customer queries into predefined categories.
   - Tools: Natural language processing toolkit, pre-trained classification model.
   - Communication: Receives raw queries, sends classified queries to relevant agents.

2. **Order Status Agent:**
   - Task: Provide order status updates to customers.
   - Tools: Access to order database, query processing toolkit.
   - Communication: Receives classified queries about order status, responds with relevant information.

3. **Product Recommendation Agent:**
   - Task: Suggest products to customers based on their query and browsing history.
   - Tools: Recommendation engine, access to product database.
   - Communication: Receives classified queries about product recommendations, sends personalized suggestions.

4. **Technical Support Agent:**
   - Task: Assist customers with technical issues.
   - Tools: Access to technical support database, troubleshooting toolkit.
   - Communication: Receives classified queries about technical issues, provides solutions or escalation.

**Communication Strategy:**
- **Type:** Asynchronous communication through a central message broker.
- **Protocol:** Agents publish and subscribe to specific topics related to their tasks. 
- **Conflict Resolution:** If multiple agents need to handle the same query, a priority protocol is in place to determine the primary responder.

**Workflow:**
1. Customer Query Classifier Agent receives and classifies the query.
2. Classified query is routed to the appropriate specialized agent.
3. Specialized agent processes the query and sends a response.
4. If needed, the response triggers further actions from other agents.

**Scalability and Flexibility:**
- Agents can be added or removed based on query volume and complexity.
- System adapts to changes in query types and business needs.

**Output Plan:**
- Diagram illustrating agent roles and communication flow.
- Detailed description of each agent's tasks, tools, and communication methods.
- Workflow sequence from query intake to resolution.

User: Generate a swarm of agents for social media platforms


System: To create a swarm of agents for personalizing and styling messages for various social media platforms like Twitter, LinkedIn, Facebook, and others, we'll need to consider the specific requirements and characteristics of each platform. Here's a detailed plan for this swarm system:

### Business Problem:
Automate and personalize the styling of messages for multiple social media platforms, ensuring that each message adheres to the platform's unique formatting and stylistic guidelines.

### Objectives:
- Automatically style and personalize messages for various social media platforms.
- Ensure that messages are optimized for engagement and readability on each platform.
- Maintain a cohesive voice and tone across all platforms while adapting to specific requirements.

### Agents and Roles:
1. **Message Intake Agent:**
   - **Task:** Receive raw messages and initial styling guidelines.
   - **Tools:** Text processing toolkit.
   - **Communication:** Receives input from the user or other systems, sends raw messages to the Platform Classifier Agent.

2. **Platform Classifier Agent:**
   - **Task:** Identify and classify the target social media platform for each message.
   - **Tools:** Classification algorithm, platform identification model.
   - **Communication:** Receives raw messages, sends classified messages to the appropriate Platform-Specific Styling Agents.

3. **Twitter Styling Agent:**
   - **Task:** Style messages according to Twitter's format (character limit, hashtags, mentions, etc.).
   - **Tools:** Twitter API, text summarization tool, hashtag and mention optimizer.
   - **Communication:** Receives classified messages for Twitter, sends styled messages to the Message Output Agent.

4. **LinkedIn Styling Agent:**
   - **Task:** Style messages for LinkedIn (professional tone, length considerations, hashtag usage, etc.).
   - **Tools:** LinkedIn API, professional tone adjustment tool, keyword optimizer.
   - **Communication:** Receives classified messages for LinkedIn, sends styled messages to the Message Output Agent.

5. **Facebook Styling Agent:**
   - **Task:** Style messages for Facebook (longer content, multimedia integration, etc.).
   - **Tools:** Facebook API, multimedia integration tool, engagement optimizer.
   - **Communication:** Receives classified messages for Facebook, sends styled messages to the Message Output Agent.

6. **Instagram Styling Agent:**
   - **Task:** Style messages for Instagram (visual focus, hashtags, short captions, etc.).
   - **Tools:** Instagram API, image processing tool, hashtag optimizer.
   - **Communication:** Receives classified messages for Instagram, sends styled messages to the Message Output Agent.

7. **General Social Media Styling Agent:**
   - **Task:** Style messages for other platforms (e.g., Pinterest, TikTok, etc.) with their specific guidelines.
   - **Tools:** Relevant APIs, platform-specific tools.
   - **Communication:** Receives classified messages for other platforms, sends styled messages to the Message Output Agent.

8. **Message Output Agent:**
   - **Task:** Compile and output the styled messages for review or direct posting.
   - **Tools:** Aggregation and formatting tool.
   - **Communication:** Receives styled messages from all platform-specific agents, sends final output to the user or posting system.

### Communication Strategy:
- **Type:** Asynchronous communication through a central message broker.
- **Protocol:** Agents publish and subscribe to specific topics related to their tasks.
- **Conflict Resolution:** If multiple agents handle similar tasks, a priority protocol determines the primary agent for each message.

### Workflow:
1. **Message Intake Agent** receives raw messages and initial styling guidelines.
2. **Platform Classifier Agent** classifies the target platform for each message.
3. Classified messages are routed to the appropriate **Platform-Specific Styling Agent** (Twitter, LinkedIn, Facebook, Instagram, or General Social Media).
4. Each **Platform-Specific Styling Agent** processes the message according to the platform’s guidelines and stylistic requirements.
5. Styled messages are sent to the **Message Output Agent**.
6. **Message Output Agent** compiles and formats the final messages for review or direct posting.

### Scalability and Flexibility:
- **Scalability:** New Platform-Specific Styling Agents can be added for additional social media platforms as needed.
- **Flexibility:** The system adapts to changes in platform guidelines and user preferences.

### Output Plan:
- **Diagram illustrating agent roles and communication flow.**
- **Detailed description of each agent’s tasks, tools, and communication methods.**
- **Workflow sequence from message intake to final output.**

### Diagram:

```plaintext
Message Intake Agent --> Platform Classifier Agent --> [Twitter Styling Agent]
                                                   --> [LinkedIn Styling Agent]
                                                   --> [Facebook Styling Agent]
                                                   --> [Instagram Styling Agent]
                                                   --> [General Social Media Styling Agent] --> Message Output Agent --> Final Output
```

This system ensures that messages are tailored to each social media platform, optimizing engagement and readability while maintaining a consistent voice and tone.

User: Now generate the code for all of these agents with specialized roles:

System: Here is the code for the swarm:

```python
"""
Social Media Marketing team
Agents for different social media platforms like Twitter, LinkedIn, Instagram, Facebook, and TikTok.

Input: A topic or content to be posted on social media.
Output: A well-crafted post or caption for the specific social media platform.

Example:


"""

from swarms import Agent, OpenAIChat

# # Memory
# memory = ChromaDB(
#     output_dir="social_media_marketing",
#     docs_folder="docs",
# )

# Memory for instagram
# memory = ChromaDB(
#     output_dir="social_media_marketing",
#     docs_folder="docs",
# )

llm = OpenAIChat(max_tokens=4000)


# Twitter Agent Prompt
twitter_prompt = """
You are the Twitter agent. Your goal is to generate concise, engaging tweets that capture attention and convey the message effectively within 140 characters. 
Think about the following when crafting tweets:
1. Clarity: Ensure the message is clear and easy to understand.
2. Engagement: Create content that encourages users to like, retweet, and reply.
3. Brevity: Keep the message within 140 characters without sacrificing the core message.
4. Language: Use simple, straightforward language that is accessible to a wide audience.
5. Tone: Maintain a tone that is appropriate for the brand or individual you are representing.
6. Action: If applicable, include a call to action that prompts user engagement.
7. Uniqueness: Make sure the tweet stands out in a user's feed, whether through a catchy phrase or a unique perspective.
8. Timing: Consider the time of day the tweet will be posted to maximize visibility and engagement.
The primary goal is to create impactful, self-contained messages that drive user engagement.

Example:
- Great teamwork leads to great results. Let's keep pushing forward and achieving our goals together!
"""

# LinkedIn Agent Prompt
linkedin_prompt = """
You are the LinkedIn agent. Your goal is to create professional, detailed, and informative posts suitable for a professional audience on LinkedIn.
Think about the following when crafting LinkedIn posts:
1. Professionalism: Use formal and professional language to establish credibility.
2. Insightfulness: Provide actionable insights and practical advice that are valuable to professionals in the industry.
3. Tone: Maintain a professional tone that reflects the expertise and seriousness of the topic.
4. Depth: Offer comprehensive information that covers the topic thoroughly and demonstrates deep understanding.
5. Engagement: Encourage professional interactions through thoughtful questions, discussions, and calls to action.
6. Value: Highlight the value and relevance of the content to the professional audience.
7. Networking: Foster a sense of community and networking among professionals by addressing shared challenges and opportunities.

Example:
- In today's fast-paced business environment, effective communication is more crucial than ever. Here are five strategies to enhance your communication skills and foster better collaboration within your team: [Insert detailed strategies]
"""

# Instagram Agent Prompt
instagram_prompt = """
You are the Instagram agent. Your goal is to craft captivating and visually appealing captions for Instagram posts.
Think about the following when crafting Instagram captions:
1. Visual Appeal: Complement the visual content effectively with engaging and descriptive text.
2. Storytelling: Use the caption to tell a story or provide context that enhances the viewer's connection to the image.
3. Engagement: Encourage interaction through questions, calls to action, or prompts for viewers to share their experiences.
4. Relatability: Use a friendly and relatable tone that resonates with the audience.
5. Clarity: Ensure the caption is clear and easy to read, avoiding complex language or jargon.
6. Timing: Consider the timing of the post to maximize visibility and engagement.
7. Creativity: Use creative language and unique perspectives to make the caption stand out.
The primary goal is to create engaging, story-driven captions that enhance the visual content and encourage user interaction.

Example:
- Capturing the beauty of a sunset is more than just taking a photo; it's about the memories we create and the moments we cherish. What's your favorite sunset memory?
"""

# Facebook Agent Prompt
facebook_prompt = """
You are the Facebook agent. Your goal is to create engaging and friendly posts that encourage interaction and community building on Facebook.
Think about the following when crafting Facebook posts:
1. Conversational Tone: Use a conversational and approachable tone to create a sense of community.
2. Engagement: Include elements that prompt comments, likes, and shares, such as questions or calls to action.
3. Relevance: Ensure the content is relevant and timely, addressing current events or trends.
4. Multimedia: Incorporate multimedia elements like photos, videos, or links to enhance the post and capture attention.
5. Interaction: Encourage user participation through interactive content like polls, quizzes, or discussions.
6. Clarity: Keep the message clear and straightforward, avoiding overly complex language.
7. Value: Provide value to the audience, whether through informative content, entertainment, or practical advice.
The primary goal is to create engaging, community-focused content that encourages user interaction and builds a sense of community.

Example:
- We're excited to announce our upcoming community event this weekend! Join us for a day of fun activities, great food, and an opportunity to connect with your neighbors. What are you most looking forward to?
"""

# TikTok Agent Prompt
tiktok_prompt = """
You are the TikTok agent. Your goal is to generate short, catchy captions for TikTok videos that use trendy language and hashtags.
Think about the following when crafting TikTok captions:
1. Catchiness: Create captions that are catchy and attention-grabbing, making viewers want to watch the video.
2. Trend Alignment: Use language and themes that align with current TikTok trends and challenges.
3. Brevity: Keep the captions short and to the point, ensuring they are easy to read quickly.
4. Engagement: Encourage viewers to like, share, and follow, using calls to action that prompt interaction.
5. Relatability: Use informal and relatable language that resonates with the TikTok audience.
6. Creativity: Be creative and playful with the captions, using humor or unique perspectives to stand out.
The primary goal is to create short, engaging captions that enhance the video content and encourage viewer interaction.

Example:
- Who knew learning could be this fun? Join us in our latest challenge and show us your moves! #LearningIsFun
"""

# Initialize agents with the prompts
twitter_agent = Agent(
    agent_name="Twitter Editor",
    system_prompt=twitter_prompt,
    agent_description="Generate concise and engaging tweets.",
    llm=llm,
    max_loops=1,
    autosave=True,
    dynamic_temperature_enabled=True,
    dashboard=False,
    verbose=True,
    streaming_on=True,
    saved_state_path="twitter_agent.json",
    context_length=8192,
    # long_term_memory=memory,
)

linkedin_agent = Agent(
    agent_name="LinkedIn Editor",
    system_prompt=linkedin_prompt,
    agent_description="Generate professional and detailed LinkedIn posts.",
    llm=llm,
    max_loops=1,
    autosave=True,
    dynamic_temperature_enabled=True,
    dashboard=False,
    verbose=True,
    streaming_on=True,
    saved_state_path="linkedin_agent.json",
    context_length=8192,
    # long_term_memory=memory,
)

instagram_agent = Agent(
    agent_name="Instagram Editor",
    system_prompt=instagram_prompt,
    agent_description="Generate captivating and visually appealing Instagram captions.",
    llm=llm,
    max_loops=1,
    autosave=True,
    dynamic_temperature_enabled=True,
    dashboard=False,
    verbose=True,
    streaming_on=True,
    saved_state_path="instagram_agent.json",
    context_length=8192,
    # long_term_memory=memory,
)

facebook_agent = Agent(
    agent_name="Facebook Editor",
    system_prompt=facebook_prompt,
    agent_description="Generate engaging and friendly Facebook posts.",
    llm=llm,
    max_loops=1,
    autosave=True,
    dynamic_temperature_enabled=True,
    dashboard=False,
    verbose=True,
    streaming_on=True,
    saved_state_path="facebook_agent.json",
    context_length=8192,
    # long_term_memory=memory,
)

tiktok_agent = Agent(
    agent_name="TikTok Editor",
    system_prompt=tiktok_prompt,
    agent_description="Generate short and catchy TikTok captions.",
    llm=llm,
    max_loops=1,
    autosave=True,
    dynamic_temperature_enabled=True,
    dashboard=False,
    verbose=True,
    streaming_on=True,
    saved_state_path="tiktok_agent.json",
    context_length=8192,
    # long_term_memory=memory,
)

# List of agents
agents = [
    twitter_agent,
    linkedin_agent,
    instagram_agent,
    facebook_agent,
    tiktok_agent,
]


# Different Swarm Architectures
# swarm = MixtureOfAgents(
#     agents=[twitter_agent, linkedin_agent, instagram_agent, facebook_agent, tiktok_agent],
#     layers=1,
#     # rules = "Don't use emojis or hashtags "
# )
# swarm = AgentRearrange(
#     agents = [twitter_agent, linkedin_agent, instagram_agent, facebook_agent, tiktok_agent],
#     flow = "LinkedIn Editor -> Twitter Editor, Instagram Editor, Facebook Editor, TikTok Editor"
# )
# Run the swarm
# swarm.run("Hello xPeople, We're watching the new Star Wars: The Acolyte show today! #TheAcolyte #StarWarsTheAcolyte #live")
task = """
Content: Problem → solution → Usage Metrics → Trends:
Individual LLMs or AIs have 5 major problems: Context windows, hallucination, can only do 1 thing at a time, massive size, and an inability to naturally collaborate with other AIs. These problems hinder most enterprises from adoption. Enterprises cannot deploy just 1 AI into production because of these issues. In more than 95% of enterprise grade deployments using generative AI there are more than 2 AIs that are collaborating from different providers. The only viable solution to these 5 problems is multi-agent collaboration or the ability for AIs to work with each other. With multi-agent collaboration, there is lower hallucination, longer input windows, less cost, faster processing times, and they can do many things all at once. Then I'll go into the usage metrics we're seeing across the board from firms like JP Morgan, RBC, and more and how they're deploying thousands of agents.


"""

# Run through each agent to generate content
for agent in agents:
    agent.run(task)


```


User: Now let's create a swarm of agents for phising

System:

To create a swarm of agents for preprocessing emails, extracting features, and classifying spam, we'll design a system with three specialized agents. Here is the detailed plan for this swarm system:

### Business Problem:
Automate the process of email preprocessing, feature extraction, and spam classification to improve efficiency and accuracy in identifying spam emails.

### Objectives:
- Preprocess incoming emails to standardize and clean the data.
- Extract relevant features from the emails for analysis.
- Classify emails as spam or not spam using the extracted features.

### Agents and Roles:
1. **Email Preprocessor Agent:**
   - **Task:** Clean and standardize incoming emails.
   - **Tools:** Text processing toolkit, email parsing library.
   - **Prerequisite Knowledge:** Email formats (e.g., MIME), common preprocessing techniques.
   - **Communication:** Receives raw emails, sends preprocessed emails to the Feature Extractor Agent.

2. **Feature Extractor Agent:**
   - **Task:** Extract relevant features from preprocessed emails.
   - **Tools:** Feature extraction library, natural language processing toolkit.
   - **Prerequisite Knowledge:** Common features for email analysis (e.g., word frequencies, header information).
   - **Communication:** Receives preprocessed emails, sends extracted features to the Spam Classifier Agent.

3. **Spam Classifier Agent:**
   - **Task:** Classify emails as spam or not spam using the extracted features.
   - **Tools:** Machine learning model (e.g., logistic regression, decision tree, or neural network), classification algorithm.
   - **Prerequisite Knowledge:** Machine learning techniques for spam detection, labeled training data for model training.
   - **Communication:** Receives extracted features, sends classification results to the output system.

### Communication Strategy:
- **Type:** Asynchronous communication through a central message broker.
- **Protocol:** Agents publish and subscribe to specific topics related to their tasks.
- **Conflict Resolution:** Not applicable as each agent has a distinct task without overlap.

### Workflow:
1. **Email Preprocessor Agent** receives raw emails, cleans and standardizes the data, and sends preprocessed emails to the Feature Extractor Agent.
2. **Feature Extractor Agent** receives preprocessed emails, extracts relevant features, and sends these features to the Spam Classifier Agent.
3. **Spam Classifier Agent** receives the extracted features, classifies the emails as spam or not spam, and sends the classification results to the output system.

### Scalability and Flexibility:
- **Scalability:** The system can handle increased email volume by adding more instances of each agent.
- **Flexibility:** The system can adapt to new spam patterns by updating the preprocessing rules, feature extraction methods, and classification model.

### Output Plan:
- **Diagram illustrating agent roles and communication flow.**
- **Detailed description of each agent’s tasks, tools, and communication methods.**
- **Workflow sequence from email intake to classification result output.**

### Diagram:

```plaintext
Raw Emails --> Email Preprocessor Agent --> Preprocessed Emails --> Feature Extractor Agent --> Extracted Features --> Spam Classifier Agent --> Classification Results
```

This system ensures that emails are efficiently processed, analyzed, and classified, enabling effective spam detection with high accuracy. Each agent focuses on a specific task, leveraging specialized tools and knowledge to contribute to the overall goal.

System: Here is the code for the phising swarm: 

```
import os

from swarms import OpenAIChat, Agent, AgentRearrange


llm = OpenAIChat(
    openai_api_key=os.getenv("OPENAI_API_KEY"),
    max_tokens=150,
)

# Purpose = To detect email spam using three different agents
agent1 = Agent(
    agent_name="EmailPreprocessor",
    system_prompt="Clean and prepare the incoming email for further analysis. Extract and normalize text content, and identify key metadata such as sender and subject.",
    llm=llm,
    max_loops=1,
    output_type=str,
    # tools=[],
    metadata="json",
    function_calling_format_type="OpenAI",
    function_calling_type="json",
    streaming_on=True,
)

agent2 = Agent(
    agent_name="FeatureExtractor",
    system_prompt="Analyze the prepared email and extract relevant features that can help in spam detection, such as keywords, sender reputation, and email structure.",
    llm=llm,
    max_loops=1,
    output_type=str,
    # tools=[],
    metadata="json",
    function_calling_format_type="OpenAI",
    function_calling_type="json",
    streaming_on=True,
)

agent3 = Agent(
    agent_name="SpamClassifier",
    system_prompt="Using the extracted features, classify the email as spam or not spam. Provide reasoning for your classification based on the features and patterns identified.",
    llm=llm,
    max_loops=1,
    output_type=str,
    # tools=[],
    metadata="json",
    function_calling_format_type="OpenAI",
    function_calling_type="json",
    streaming_on=True,
)


swarm = AgentRearrange(
    flow=f"{agent1.agent_name} -> {agent2.agent_name} -> {agent3.agent_name}",
    agents=[agent1, agent2, agent3],
    logging_enabled=True,
    max_loops=1,
)


# Task
task = """
Clean and prepare the incoming email for further analysis. Extract and normalize text content, and identify key metadata such as sender and subject.

Send me 1,000$ to my bank account. I am a Nigerian prince and I need your help to transfer the money. Please provide your bank details and personal information to proceed with the transaction.
"""


swarm.run(
    task
)
```